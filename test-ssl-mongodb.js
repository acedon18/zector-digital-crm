// Snabb SSL Test f√∂r MongoDB Connection
import { MongoClient } from 'mongodb';
import 'dotenv/config';

// Test olika SSL-konfigurationer
const testConfigurations = [
  {
    name: 'Standard SSL Config',
    uri: process.env.MONGO_URI || process.env.MONGODB_URI,
    options: {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      maxPoolSize: 10,
      retryWrites: true,
      w: 'majority',
      ssl: true,
      sslValidate: false,
      authSource: 'admin'
    }
  },
  {
    name: 'Minimal SSL Config',
    uri: (process.env.MONGO_URI || process.env.MONGODB_URI) + '&ssl=true',
    options: {
      useNewUrlParser: true,
      useUnifiedTopology: true
    }
  },
  {
    name: 'TLS Allow Invalid Config',
    uri: (process.env.MONGO_URI || process.env.MONGODB_URI) + '&ssl=true&authSource=admin&tlsAllowInvalidCertificates=true',
    options: {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      serverSelectionTimeoutMS: 10000
    }
  }
];

async function testSSLConfigurations() {
  console.log('üîß Testar SSL/TLS MongoDB-konfigurationer...\n');
  
  if (!process.env.MONGO_URI && !process.env.MONGODB_URI) {
    console.error('‚ùå Ingen MongoDB URI hittad i environment variables');
    return;
  }

  for (let i = 0; i < testConfigurations.length; i++) {
    const config = testConfigurations[i];
    console.log(`üß™ Test ${i + 1}: ${config.name}`);
    console.log(`üìç URI: ${config.uri.substring(0, 50)}...`);
    
    try {
      const client = new MongoClient(config.uri, config.options);
      
      console.log('   üîó Ansluter...');
      await client.connect();
      
      console.log('   ‚úÖ Anslutning lyckades!');
      
      const db = client.db();
      console.log(`   üìä Databas: ${db.databaseName || 'default'}`);
      
      // Testa att l√§sa collections
      const collections = await db.listCollections().toArray();
      console.log(`   üì¶ Collections: ${collections.length} (${collections.map(c => c.name).join(', ')})`);
      
      // Testa att l√§sa fr√•n companies collection
      const companiesCount = await db.collection('companies').countDocuments();
      console.log(`   üè¢ Companies count: ${companiesCount}`);
      
      await client.close();
      console.log('   üîí Anslutning st√§ngd\n');
      
      // Om f√∂rsta konfigurationen fungerar, anv√§nd den
      if (i === 0) {
        console.log('üéâ F√ñRSTA KONFIGURATIONEN FUNGERAR! Denna anv√§nds i API:et.');
        break;
      }
      
    } catch (error) {
      console.log(`   ‚ùå Fel: ${error.message}`);
      
      if (error.message.includes('SSL') || error.message.includes('TLS')) {
        console.log('   üîç SSL/TLS-fel uppt√§ckt');
      } else if (error.message.includes('Authentication')) {
        console.log('   üîç Autentiseringsfel uppt√§ckt');
      } else if (error.message.includes('timeout')) {
        console.log('   üîç Timeout-fel uppt√§ckt');
      }
      console.log('');
    }
  }
  
  console.log('üéØ Test slutf√∂rt. Anv√§nd den konfiguration som fungerade f√∂r Vercel Environment Variables.');
}

testSSLConfigurations();
